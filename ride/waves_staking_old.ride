{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let PERCENT_FACTOR = 1000000000000.toBigInt()

func getLeaseNode() = {
    match getString("LEASE_NODE") {
        case a:String => Address(fromBase58String(a))
        case _ => throw("getLeaseNode: no lease node address")
    }
}

func readInt(key_: String, default_: Int) = {
    match getInteger(key_) {
        case a:Int => a
        case _ => default_
    }
}

func readBigInt(key_: String, default_: Int) = {
    match getBinary(key_) {
        case a:ByteVector => a.toBigInt()
        case _ => default_.toBigInt()
    }
}

func _updateLeasing(amount_: Int) = {
    let leaseId = getBinary("LEASE_ID")
    let leaseAmount = readInt("LEASE_AMOUNT", 0)
    let newLeaseAmount = leaseAmount + amount_

    let unleaseOrEmpty =
        if leaseId.isDefined() then
            [LeaseCancel(leaseId.value())]
        else []

    let leaseActions =
        if newLeaseAmount > 0 then
            let lease = Lease(getLeaseNode(), newLeaseAmount)
            [
                lease,
                BinaryEntry("LEASE_ID", calculateLeaseId(lease)),
                IntegerEntry("LEASE_AMOUNT", newLeaseAmount)
            ]
        else
            [
                DeleteEntry("LEASE_ID"),
                IntegerEntry("LEASE_AMOUNT", 0)
            ]

    unleaseOrEmpty ++ leaseActions
}

func _balanceOf(account_: String) = {
    let balance = readInt("ACCOUNT_BALANCE__" + account_, 0)
    let oldDeposit = readInt("ACCOUNT_DEPOSIT__" + account_, 0)

    if balance == 0 && oldDeposit == 0 then
        0
    else
        let rewardIndex = readInt("ACCOUNT_REWARD_IDX__" + account_, 0)
        let percentsLength = readInt("PERCENTS_LAST_IDX", 0)

        if rewardIndex == percentsLength - 1 then
            balance + oldDeposit
        else if oldDeposit == 0 then
            let profit = readBigInt("PERCENTS__" + (percentsLength - 1).toString(), 0)
            
            toInt(profit * balance.toBigInt() / readBigInt("PERCENTS__" + rewardIndex.toString(), 0))
        else
            let percentsLast = readBigInt("PERCENTS__" + (percentsLength - 1).toString(), 0)
            let percentsAtIndex = readBigInt("PERCENTS__" + rewardIndex.toString(), 0)
            let percentsAtNextIndex = readBigInt("PERCENTS__" + (rewardIndex + 1).toString(), 0)

            let newBalance = balance.toBigInt() * percentsLast / percentsAtIndex
            let profit = oldDeposit.toBigInt() * percentsLast / percentsAtNextIndex

            toInt(profit + newBalance)
}

@Callable(i)
func init() = {
    let percentsLength = readInt("PERCENTS_LAST_IDX", 0)

    strict err =
        if percentsLength != 0 then
            throw("init: already initialized")
        else unit

    (
        [
            IntegerEntry("PERCENTS_LAST_IDX", percentsLength + 1),
            BinaryEntry("PERCENTS__" + percentsLength.toString(), PERCENT_FACTOR.toBytes())
        ], unit
    )
}

@Callable(i)
func deposit() = {
    let caller = i.caller.toString()

    strict err =
        if i.payments.size() < 1 then
            throw("deposit: no payments")
        else if i.payments[0].assetId != unit then
            throw("deposit: payment is not waves")
        else if i.payments[0].amount <= 0 then
            throw("deposit: invalid payment amount")
        else unit

    let liquidDeposit = readInt("LIQUID_DEPOSIT", 0)
    let liquidDepositUpdated = liquidDeposit + i.payments[0].amount

    let oldDeposit = readInt("ACCOUNT_DEPOSIT__" + caller, 0)
    let percentsLength = readInt("PERCENTS_LAST_IDX", 0)
    let rewardIndex = readInt("ACCOUNT_REWARD_IDX__" + caller, 0)

    let accountActions =
        if oldDeposit == 0 || rewardIndex != percentsLength - 1 then
            [
                IntegerEntry("ACCOUNT_BALANCE__" + caller, _balanceOf(caller)),
                IntegerEntry("ACCOUNT_REWARD_IDX__" + caller, percentsLength - 1),
                IntegerEntry("ACCOUNT_DEPOSIT__" + caller, i.payments[0].amount)
            ]
        else
            [
                IntegerEntry("ACCOUNT_DEPOSIT__" + caller, oldDeposit + i.payments[0].amount)
            ]

    let leaseActions = _updateLeasing(i.payments[0].amount)

    (
        [
            IntegerEntry("LIQUID_DEPOSIT", liquidDepositUpdated)
        ] ++ accountActions ++ leaseActions, unit
    )
}

@Callable(i)
func stake(reward_: Int) = {
    let caller = i.caller.toString()

    strict err =
        if i.caller != getLeaseNode() then
            throw("stake: caller is not allowed")
        else if reward_ <= 0 then
            throw("stake: invalid reward")
        else unit

    let liquidTotalSupply = readInt("LIQUID_TOTAL_SUPPLY", 0)
    let liquidDeposit = readInt("LIQUID_DEPOSIT", 0)
    let percentsLength = readInt("PERCENTS_LAST_IDX", 0)

    let actions =
        if liquidTotalSupply == 0 then
            []
        else
            let oldPercent = readBigInt("PERCENTS__" + (percentsLength - 1).toString(), 0)
            let percent = reward_.toBigInt() * PERCENT_FACTOR / liquidTotalSupply.toBigInt()
            let newPercent = percent + PERCENT_FACTOR

            [
                IntegerEntry("PERCENTS_LAST_IDX", percentsLength + 1),
                BinaryEntry("PERCENTS__" + percentsLength.toString(), (newPercent * oldPercent / PERCENT_FACTOR).toBytes())
            ]

    let liquidTotalSupplyUpdated =
        if liquidTotalSupply == 0 then
            liquidTotalSupply + liquidDeposit
        else
            liquidTotalSupply + liquidDeposit + reward_

    (
        [
            IntegerEntry("LIQUID_TOTAL_SUPPLY", liquidTotalSupplyUpdated),
            IntegerEntry("LIQUID_DEPOSIT", 0)
        ] ++ actions, unit
    )
}

@Callable(i)
func withdraw() = {
    let caller = i.caller.toString()

    let oldDeposit = readInt("ACCOUNT_DEPOSIT__" + caller, 0)
    let rewardIndex = readInt("ACCOUNT_REWARD_IDX__" + caller, 0)
    let percentsLength = readInt("PERCENTS_LAST_IDX", 0)
    let liquidTotalSupply = readInt("LIQUID_TOTAL_SUPPLY", 0)
    let liquidDeposit = readInt("LIQUID_DEPOSIT", 0)

    let actions =
        if rewardIndex == percentsLength - 1 then
            let balance = readInt("ACCOUNT_BALANCE__" + caller, 0)
            (
                balance + oldDeposit,
                [
                    IntegerEntry("LIQUID_TOTAL_SUPPLY", liquidTotalSupply - balance),
                    IntegerEntry("LIQUID_DEPOSIT", liquidDeposit - oldDeposit)
                ]
            )
        else
            let balance = _balanceOf(caller)
            (
                balance,
                [
                    IntegerEntry("LIQUID_TOTAL_SUPPLY", liquidTotalSupply - balance)
                ]
            )

    strict err =
        if actions._1 <= 0 then
            throw("insufficient funds")
        else unit

    let leaseActions = _updateLeasing(-1 * actions._1)

    (
        leaseActions ++ actions._2 ++ [
            IntegerEntry("ACCOUNT_BALANCE__" + caller, 0),
            IntegerEntry("ACCOUNT_DEPOSIT__" + caller, 0),
            ScriptTransfer(i.caller, actions._1, unit)
        ], unit
    )
}

@Verifier(tx)
func verify() = {
    sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
}
